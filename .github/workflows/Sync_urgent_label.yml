name: Sync urgent label from issue to PR

on:
  pull_request:
    types: [opened, edited, reopened, synchronize, ready_for_review]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number (for manual/local testing)'
        required: true
      issue_numbers:
        description: 'Comma-separated issue numbers (e.g. 123,456). If empty, the workflow will try to parse from PR body on PR events'
        required: false
        default: ''

permissions:
  contents: read
  pull-requests: write
  issues: write      
  metadata: read

jobs:
  sync-label:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber;
            if (context.eventName === 'workflow_dispatch') {
              prNumber = core.getInput('pr_number', { required: true });
            } else if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else {
              core.setFailed(`Unsupported event: ${context.eventName}`);
              return;
            }
            core.setOutput('number', String(prNumber));

      - name: Read PR body
        id: prbody
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
        with:
          script: |
            let body = '';
            if (context.eventName === 'workflow_dispatch') {
              const prNumber = Number(process.env.PR_NUMBER);
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              body = pr.body || '';
            } else {
              body = context.payload.pull_request.body || '';
            }
            core.setOutput('body', body);

      - name: Extract issue numbers
        id: issues
        uses: actions/github-script@v7
        env:
          INPUT_ISSUES: ${{ github.event.inputs.issue_numbers }}
          PR_BODY: ${{ steps.prbody.outputs.body }}
        with:
          script: |
            const inputIssues = (process.env.INPUT_ISSUES || '').trim();
            let numbers = [];
            if (inputIssues) {
              numbers = inputIssues.split(',').map(s => s.trim()).filter(Boolean);
            } else {
              const text = process.env.PR_BODY || '';
              const matches = [...text.matchAll(/#(\d+)/g)].map(m => m[1]);
              numbers = Array.from(new Set(matches));
            }
            core.info(`Detected related issue numbers: ${numbers.join(', ') || '(none)'}`);
            core.setOutput('numbers', JSON.stringify(numbers));

      - name: Ensure 'urgent' label exists
        id: ensure_label
        uses: actions/github-script@v7
        with:
          script: |
            const labelName = 'urgent';
            try {
              await github.rest.issues.getLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: labelName
              });
              core.info(`Label '${labelName}' exists.`);
            } catch (err) {
              if (err.status === 404) {
                core.info(`Label '${labelName}' not found. Creating...`);
                await github.rest.issues.createLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: labelName,
                  color: 'd73a4a',
                  description: 'Marks urgent items'
                });
              } else {
                throw err;
              }
            }

      - name: Check if any related issue has 'urgent'
        id: check_urgent
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBERS: ${{ steps.issues.outputs.numbers }}
        with:
          script: |
            const numbers = JSON.parse(process.env.ISSUE_NUMBERS || '[]');
            if (numbers.length === 0) {
              core.setOutput('has_urgent', 'false');
              core.info('No related issues detected.');
              return;
            }
            const hasUrgent = async (n) => {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(n)
              });
              return (issue.labels || []).some(l => (l.name || '').toLowerCase() === 'urgent');
            };
            let anyUrgent = false;
            for (const n of numbers) {
              try {
                if (await hasUrgent(n)) { anyUrgent = true; core.info(`Issue #${n} has 'urgent'.`); break; }
                else { core.info(`Issue #${n} does not have 'urgent'.`); }
              } catch (e) { core.warning(`Failed to read issue #${n}: ${e.message}`); }
            }
            core.setOutput('has_urgent', String(anyUrgent));

      - name: Add 'urgent' label to PR (if needed)
        if: steps.check_urgent.outputs.has_urgent == 'true'
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
        with:
          script: |
            const prNumber = Number(process.env.PR_NUMBER);
            const labelName = 'urgent';
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              labels: [labelName]
            });
            core.info(`Added '${labelName}' label to PR #${prNumber}.`);

      - name: Log result
        run: echo "has_urgent = ${{ steps.check_urgent.outputs.has_urgent }}"
