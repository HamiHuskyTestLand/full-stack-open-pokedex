name: Notify on Reviewer Commit

on:
  pull_request_target:
    types: [synchronize]

jobs:
  notify-reviewers:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Check and prepare notification
        id: check-reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pusher = context.payload.sender.login;
            const pr = context.payload.pull_request;
            const prAuthor = pr.user.login;
            const prNumber = pr.number;
            
            const requestedReviewers = (pr.requested_reviewers || [])
              .filter(r => r.type !== 'Bot')
              .map(r => r.login);
            
            console.log(`Pusher: ${pusher}`);
            console.log(`PR Author: ${prAuthor}`);
            console.log(`Requested Reviewers (excluding bots): ${requestedReviewers.join(', ')}`);
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            const allReviewers = [...new Set([
              ...requestedReviewers,
              ...reviews.map(r => r.user.login)
            ])];
            
            const isPusherReviewer = allReviewers.includes(pusher) && pusher !== prAuthor;
            
            if (!isPusherReviewer) {
              console.log('Pusher is not a reviewer, skipping notification');
              return { shouldNotify: false };
            }
            
            console.log('Pusher is a reviewer, checking for other reviewers...');
            
            const otherReviewers = requestedReviewers.filter(r => r !== pusher);
            
            if (otherReviewers.length === 0) {
              console.log('No other reviewers, will notify designated person');
              return {
                shouldNotify: true,
                scenario: 'no-reviewers',
                prNumber: prNumber,
                pusher: pusher
              };
            }
            
            const reviewerStatus = {};
            
            otherReviewers.forEach(reviewer => {
              reviewerStatus[reviewer] = { approved: false, lastReviewDate: null };
            });
            
            reviews.forEach(review => {
              const reviewer = review.user.login;
              if (otherReviewers.includes(reviewer)) {
                const reviewDate = new Date(review.submitted_at);
                
                if (!reviewerStatus[reviewer].lastReviewDate || 
                    reviewDate > reviewerStatus[reviewer].lastReviewDate) {
                  reviewerStatus[reviewer].lastReviewDate = reviewDate;
                  reviewerStatus[reviewer].approved = (review.state === 'APPROVED');
                }
              }
            });
            
            console.log('Reviewer Status:', JSON.stringify(reviewerStatus, null, 2));
            
            const allApproved = otherReviewers.every(r => reviewerStatus[r].approved);
            
            if (!allApproved) {
              console.log('Not all reviewers approved, skip notification');
              return { shouldNotify: false };
            }
            
            console.log('All reviewers approved');
            
            if (otherReviewers.length === 1) {
              console.log(`Single reviewer ${otherReviewers[0]}, will notify`);
              return {
                shouldNotify: true,
                scenario: 'single-reviewer-approved',
                prNumber: prNumber,
                pusher: pusher,
                reviewerMentions: `@${otherReviewers[0]}`
              };
            } else {
              const lastApprover = otherReviewers.reduce((latest, reviewer) => {
                if (!latest || reviewerStatus[reviewer].lastReviewDate > reviewerStatus[latest].lastReviewDate) {
                  return reviewer;
                }
                return latest;
              }, null);
              
              console.log(`Multiple reviewers, last approver: ${lastApprover}`);
              
              return {
                shouldNotify: true,
                scenario: 'all-approved',
                prNumber: prNumber,
                pusher: pusher,
                reviewerMentions: `@${lastApprover}`
              };
            }

      - name: Notify single reviewer who approved
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'single-reviewer-approved'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.check-reviewers.outputs.result).prNumber }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed new changes to this PR.
            
            ${{ fromJson(steps.check-reviewers.outputs.result).reviewerMentions }} - Please review the latest changes when you have a chance.

      - name: Notify last approver (all approved)
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'all-approved'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.check-reviewers.outputs.result).prNumber }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed new changes to this PR.
            
            All reviewers have approved. ${{ fromJson(steps.check-reviewers.outputs.result).reviewerMentions }} - Please review the latest changes again.

      - name: Notify designated person
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'no-reviewers'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.check-reviewers.outputs.result).prNumber }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed changes, but no other reviewers are assigned.
            
            @kreuz123 - Please assign additional reviewers or review this PR.
