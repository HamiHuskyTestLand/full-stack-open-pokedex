name: Notify on Reviewer Commit

on:
  pull_request_target:
    types: [synchronize]

jobs:
  notify-reviewers:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Check and prepare notification
        id: check-reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pusher = context.payload.sender.login;
            const pr = context.payload.pull_request;
            const prAuthor = pr.user.login;
            const prNumber = pr.number;
            
            console.log('=== Step 1: Get requested reviewers ===');
            const requestedReviewers = (pr.requested_reviewers || [])
                .filter(r => r.type !== 'Bot')
                .map(r => r.login);
            console.log('Requested Reviewers (current):', requestedReviewers);
            
            console.log('\n=== Step 2: Get timeline ===');
            const { data: timeline } = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
            });
            console.log('Timeline events count:', timeline.length);
            
            const allEverRequestedReviewers = new Set(requestedReviewers);
            console.log('Initial set from requestedReviewers:', Array.from(allEverRequestedReviewers));
            
            timeline.forEach(event => {
                if (event.event === 'review_requested' && event.requested_reviewer) {
                    if (event.requested_reviewer.type !== 'Bot') {
                        console.log('Found review_requested event for:', event.requested_reviewer.login);
                        allEverRequestedReviewers.add(event.requested_reviewer.login);
                    }
                }
            });
            console.log('After processing timeline:', Array.from(allEverRequestedReviewers));
            
            console.log('\n=== Step 3: Get reviews ===');
            const { data: reviews } = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
            });
            console.log('Total reviews count:', reviews.length);
            console.log('All reviews:', reviews.map(r => ({ 
                user: r.user.login, 
                state: r.state,
                submitted_at: r.submitted_at 
            })));
            
            const latestReviewsByUser = reviews
                .filter(review => review.user.type !== 'Bot')
                .reduce((acc, review) => {
                    acc[review.user.login] = review;
                    return acc;
                }, {});
            
            console.log('Latest reviews by user:', Object.keys(latestReviewsByUser));
            
            console.log('\n=== Step 4: Combine reviewers ===');
            console.log('Before adding reviews:', Array.from(allEverRequestedReviewers));
            
            // 🎯 把所有曾經 review 過的人也加入
            Object.keys(latestReviewsByUser).forEach(reviewer => {
                console.log('Adding reviewer from reviews:', reviewer);
                allEverRequestedReviewers.add(reviewer);
            });
            
            console.log('After adding reviews:', Array.from(allEverRequestedReviewers));
            
            const allReviewers = Array.from(allEverRequestedReviewers);
            const isPusherReviewer = allReviewers.includes(pusher) && pusher !== prAuthor;
            
            console.log('\n=== Summary ===');
            console.log('PR Number:', prNumber);
            console.log('Pusher:', pusher);
            console.log('PR Author:', prAuthor);
            console.log('All Reviewers:', allReviewers);
            console.log('Is Pusher Reviewer:', isPusherReviewer);
            
            if (!isPusherReviewer) {
                return { shouldNotify: false };
            }
            
            const otherReviewers = allReviewers.filter(r => r !== pusher);
            console.log('Other Reviewers:', otherReviewers);
            
            if (otherReviewers.length === 0) {
                return {
                    shouldNotify: true,
                    scenario: 'no-reviewers',
                    prNumber: prNumber,
                    pusher: pusher
                };
            }
            
            console.log('\n=== Checking reviewer status ===');
            const reviewerStatus = {};
            
            otherReviewers.forEach(reviewer => {
                const latestReview = latestReviewsByUser[reviewer];
                const needsReview = requestedReviewers.includes(reviewer);
                
                reviewerStatus[reviewer] = {
                    approved: false,
                    lastReviewDate: latestReview ? new Date(latestReview.submitted_at) : null
                };
                
                if (latestReview && !needsReview) {
                    reviewerStatus[reviewer].approved = (latestReview.state === 'APPROVED');
                }
                
                console.log(`\nReviewer: ${reviewer}`);
                console.log(`  - Has review: ${!!latestReview}`);
                console.log(`  - Review state: ${latestReview?.state || 'N/A'}`);
                console.log(`  - Needs re-review: ${needsReview}`);
                console.log(`  - Approved: ${reviewerStatus[reviewer].approved}`);
                console.log(`  - Last review date: ${reviewerStatus[reviewer].lastReviewDate}`);
            });
            
            const allApproved = otherReviewers.every(r => reviewerStatus[r].approved);
            
            console.log('\n=== Final Decision ===');
            console.log('All Approved:', allApproved);
            
            if (!allApproved) {
                return { shouldNotify: false };
            }
            
            if (otherReviewers.length === 1) {
                console.log('Scenario: single-reviewer-approved');
                return {
                    shouldNotify: true,
                    scenario: 'single-reviewer-approved',
                    prNumber: prNumber,
                    pusher: pusher,
                    reviewerMentions: `@${otherReviewers[0]}`
                };
            } else {
                const lastApprover = otherReviewers.reduce((latest, reviewer) => {
                    if (!latest ||
                        (reviewerStatus[reviewer].lastReviewDate &&
                         reviewerStatus[reviewer].lastReviewDate > reviewerStatus[latest].lastReviewDate)) {
                        return reviewer;
                    }
                    return latest;
                }, null);
                
                console.log('Scenario: all-approved');
                console.log('Last Approver:', lastApprover);
                
                return {
                    shouldNotify: true,
                    scenario: 'all-approved',
                    prNumber: prNumber,
                    pusher: pusher,
                    reviewerMentions: `@${lastApprover}`
                };
            }

      - name: Notify single reviewer who approved
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'single-reviewer-approved'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.check-reviewers.outputs.result).prNumber }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed new changes to this PR.
            
            ${{ fromJson(steps.check-reviewers.outputs.result).reviewerMentions }} - Please review the latest changes when you have a chance.

      - name: Notify last approver
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'all-approved'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.check-reviewers.outputs.result).prNumber }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed new changes to this PR.
            
            All reviewers have approved. ${{ fromJson(steps.check-reviewers.outputs.result).reviewerMentions }} - Please review the latest changes again.

      - name: Notify designated person
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'no-reviewers'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.check-reviewers.outputs.result).prNumber }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed changes, but no other reviewers are assigned.
            
            @kreuz123 - Please assign an additional reviewer.
