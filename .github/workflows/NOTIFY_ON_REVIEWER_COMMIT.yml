name: Notify on Reviewer Commit

on:
  pull_request_target:
    types: [synchronize]

jobs:
  notify-reviewers:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Check and prepare notification
        id: check-reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pusher = context.payload.sender.login;
            const pr = context.payload.pull_request;
            const prAuthor = pr.user.login;

            const requestedReviewers = (pr.requested_reviewers || [])
              .filter(r => r.type !== 'Bot')
              .map(r => r.login);

            const allReviewers = new Set(requestedReviewers);
            
            const events = await github.paginate(
              github.rest.issues.listEventsForTimeline,
              {
                ...context.repo,
                issue_number: pr.number
              }
            );
            
            for (const event of events) {
              if (event.event === 'review_requested' && event.requested_reviewer?.type !== 'Bot') {
                allReviewers.add(event.requested_reviewer.login);
              }
            }

            if (!allReviewers.has(pusher) || pusher === prAuthor) {
              return { shouldNotify: false };
            }

            const otherReviewers = Array.from(allReviewers).filter(r => r !== pusher);
            
            if (otherReviewers.length === 0) {
              return {
                shouldNotify: true,
                scenario: 'no-reviewers',
                pusher
              };
            }

            const reviews = await github.paginate(
              github.rest.pulls.listReviews,
              {
                ...context.repo,
                pull_number: pr.number
              }
            );

            const latestReviews = reviews
              .filter(r => r.user?.type !== 'Bot')
              .reduce((acc, r) => ({ ...acc, [r.user.login]: r }), {});

            const currentRequested = new Set(requestedReviewers);

            const allApproved = otherReviewers.every(reviewer => {
              const review = latestReviews[reviewer];
              return review?.state === 'APPROVED' && !currentRequested.has(reviewer);
            });

            if (!allApproved) return { shouldNotify: false };

            const lastApprover = otherReviewers
              .filter(r => latestReviews[r]?.submitted_at)
              .sort((a, b) => 
                new Date(latestReviews[b].submitted_at) - new Date(latestReviews[a].submitted_at)
              )[0] || otherReviewers[0];

            return {
              shouldNotify: true,
              scenario: 'all-approved',
              pusher,
              lastApprover
            };

      - name: Notify last approver
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'all-approved'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed new changes to this PR.
            
            @${{ fromJson(steps.check-reviewers.outputs.result).lastApprover }} - Please review the latest changes again.

      - name: Notify designated person
        if: fromJson(steps.check-reviewers.outputs.result).shouldNotify && fromJson(steps.check-reviewers.outputs.result).scenario == 'no-reviewers'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Reviewer @${{ fromJson(steps.check-reviewers.outputs.result).pusher }} has pushed changes, but no other reviewers are assigned.
            
            @kreuz123 - Please assign an additional reviewer.
