name: Check All Reviewers Approved

on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: number
    outputs:
      all_approved:
        value: ${{ jobs.check-approvals.outputs.all_approved }}

jobs:
  check-approvals:
    runs-on: ubuntu-latest
    outputs:
      all_approved: ${{ steps.check.outputs.all_approved }}
    steps:
      - name: Check if all reviewers have approved
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = ${{ inputs.pr_number }};
            
            const { data: pr } = await github.rest.pulls.get({ 
                owner, 
                repo, 
                pull_number: prNumber 
            });

            let allTimelineEvents = [], page = 1, hasMore = true;
            while (hasMore) {
                const { data } = await github.rest.issues.listEventsForTimeline({
                    owner, 
                    repo, 
                    issue_number: prNumber, 
                    per_page: 100, 
                    page: page++
                });
                allTimelineEvents.push(...data);
                hasMore = data.length === 100;
            }

            const allEverRequestedReviewers = new Set(pr.requested_reviewers.map(r => r.login));
            allTimelineEvents.forEach(e => {
                if (e.event === 'review_requested' && e.requested_reviewer) {
                    allEverRequestedReviewers.add(e.requested_reviewer.login);
                }
            });

            let allReviews = [];
            page = 1;
            hasMore = true;
            while (hasMore) {
                const { data } = await github.rest.pulls.listReviews({
                    owner, 
                    repo, 
                    pull_number: prNumber, 
                    per_page: 100, 
                    page: page++
                });
                allReviews.push(...data);
                hasMore = data.length === 100;
            }

            const latestReviewsByUser = allReviews.reduce(
                (acc, r) => ({ ...acc, [r.user.login]: r }), 
                {}
            );
            
            const reviewerOnlyReviews = Object.values(latestReviewsByUser).filter(r =>
                r.user.type !== 'Bot'
                && allEverRequestedReviewers.has(r.user.login)
            );

            const hasPendingHumanReviewers = pr.requested_reviewers.some(r => r.type !== 'Bot');

            const allReviewersApproved =
                reviewerOnlyReviews.filter(r => r.state === 'APPROVED').length > 0
                && !hasPendingHumanReviewers
                && !reviewerOnlyReviews.some(r => r.state === 'CHANGES_REQUESTED')
                && !reviewerOnlyReviews.some(r => r.state === 'COMMENTED');

            core.setOutput('all_approved', allReviewersApproved);
