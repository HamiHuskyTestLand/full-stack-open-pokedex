name: Reusable Slack Notification

on:
  workflow_call:
    inputs:
      message_template:
        required: true
        type: string
      target_users:
        required: true
        type: string
      send_channel:
        required: false
        type: boolean
        default: true
      send_dm:
        required: false
        type: boolean
        default: true
    secrets:
      SLACK_BOT_TOKEN:
        required: true
      SLACK_CHANNEL_ID:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notifications
        uses: actions/github-script@v7
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_REVIEWER_MAP: ${{ vars.SLACK_REVIEWER_MAP }}
        with:
          script: |
            const token = process.env.SLACK_BOT_TOKEN;
            const channelId = process.env.SLACK_CHANNEL_ID;
            const reviewerMap = JSON.parse(process.env.SLACK_REVIEWER_MAP || "{}");
            const targetUsers = `${{ inputs.target_users }}`.split(',').filter(Boolean);
            
            // Map to Slack IDs and create message
            const slackIds = [...new Set(targetUsers)]
              .map(user => reviewerMap[user] || reviewerMap[user?.toLowerCase()])
              .filter(Boolean);
            const mentions = slackIds.map(id => `<@${id}>`).join(' ');
            const message = `${{ inputs.message_template }}`;
            
            // Send notifications concurrently
            const notifications = [];
            
            if (`${{ inputs.send_channel }}` === 'true') {
              const channelMsg = slackIds.length > 0 ? `${message} ${mentions}` : message;
              notifications.push(
                fetch('https://slack.com/api/chat.postMessage', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                  body: JSON.stringify({ channel: channelId, text: channelMsg })
                }).then(r => r.json()).then(r => core.info(r.ok ? 'Channel sent' : `Channel failed: ${r.error}`))
              );
            }
            
            if (`${{ inputs.send_dm }}` === 'true' && slackIds.length > 0) {
              slackIds.forEach(userId => {
                notifications.push(
                  fetch('https://slack.com/api/chat.postMessage', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
                    body: JSON.stringify({ channel: userId, text: message })
                  }).then(r => r.json()).then(r => core.info(r.ok ? `DM sent to ${userId}` : `DM failed: ${r.error}`))
                );
              });
            }
            
            await Promise.allSettled(notifications);
            core.info(`Processed ${targetUsers.length} users â†’ ${slackIds.length} Slack notifications`);
