name: Urgent PR Slack Notification

on:
  pull_request:
    types: [labeled, review_requested]

jobs:
  notify_urgent:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get PR basic information
      - name: Get PR details
        id: pr_info
        run: |
          echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "created_at=${{ github.event.pull_request.created_at }}" >> $GITHUB_OUTPUT
          echo "has_urgent_label=${{ contains(github.event.pull_request.labels.*.name, 'urgent') }}" >> $GITHUB_OUTPUT
          echo "reviewers=${{ toJson(github.event.pull_request.requested_reviewers.*.login) }}" >> $GITHUB_OUTPUT

      # Step 2: Check if PR is urgent (simplified logic)
      - name: Check if urgent PR
        id: check_urgent
        run: |
          ACTION="${{ github.event.action }}"

          if [[ "$ACTION" == "labeled" ]]; then
            # Only trigger if the new label is 'urgent'
            NEW_LABEL="${{ github.event.label.name }}"
            if [[ "${NEW_LABEL,,}" == "urgent" ]]; then
              echo "isUrgent=true" >> $GITHUB_OUTPUT
            else
              echo "isUrgent=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "$ACTION" == "review_requested" ]]; then
            # Only trigger if PR already has 'urgent' label
            HAS_URGENT="${{ steps.pr_info.outputs.has_urgent_label }}"
            echo "isUrgent=$HAS_URGENT" >> $GITHUB_OUTPUT
          else
            echo "isUrgent=false" >> $GITHUB_OUTPUT
          fi

          echo "Action: $ACTION, Is Urgent: $(grep isUrgent $GITHUB_OUTPUT | cut -d= -f2)"

      # Step 3: Compute notification targets (using data from Step 1)
      - name: Compute notification targets
        id: compute_targets
        if: steps.check_urgent.outputs.isUrgent == 'true'
        uses: actions/github-script@v7
        env:
          SLACK_REVIEWER_MAP: ${{ vars.SLACK_REVIEWER_MAP }} # {"ghLogin":"UXXXX..."}
        with:
          script: |
            const reviewerMap = JSON.parse(process.env.SLACK_REVIEWER_MAP || "{}");
            const action = `${{ github.event.action }}`;
            const prCreatedAt = `${{ steps.pr_info.outputs.created_at }}`;

            let targetUsers = [];
            let shouldPostToChannel = false;

            if (action === 'review_requested') {
              // New review request: notify the newly requested reviewer
              const newReviewer = `${{ github.event.requested_reviewer.login }}`;
              if (newReviewer && newReviewer !== '') {
                targetUsers = [newReviewer];
                shouldPostToChannel = true;
              }
            } else if (action === 'labeled') {
              // Added urgent label: notify all current reviewers (from Step 1)
              const reviewers = JSON.parse(`${{ steps.pr_info.outputs.reviewers }}`);
              targetUsers = reviewers;

              // De-duplication logic: for fresh PRs, only post to channel if no reviewers
              const prAge = (Date.now() - new Date(prCreatedAt)) / 1000;
              const isPrFresh = prAge < 60;
              shouldPostToChannel = isPrFresh ? (targetUsers.length === 0) : true;

              // DEBUG: Remove after testing
              core.info(`Urgent label added to PR (age: ${Math.round(prAge)}s)`);
              core.info(`Current reviewers: ${targetUsers.length}, Should post to channel: ${shouldPostToChannel}`);
            }

            // Map to Slack IDs
            const slackIds = [...new Set(targetUsers)]
              .map(user => reviewerMap[user] || reviewerMap[user?.toLowerCase()])
              .filter(Boolean);

            const mentions = slackIds.map(id => `<@${id}>`).join(' ');

            core.setOutput('slackMentions', mentions);
            core.setOutput('slackUserIds', JSON.stringify(slackIds));
            core.setOutput('hasTargets', String(slackIds.length > 0));
            core.setOutput('shouldPostToChannel', String(shouldPostToChannel));

            // DEBUG: Remove after testing
            core.info(`Event: ${action}, Targets: ${targetUsers.length} GitHub users â†’ ${slackIds.length} Slack users, Channel: ${shouldPostToChannel}`);
            return slackIds.length;

      # Step 4: Post to Slack channel (using official Slack action)
      - name: Post to Slack channel
        if: |
          steps.check_urgent.outputs.isUrgent == 'true' &&
          steps.compute_targets.outputs.shouldPostToChannel == 'true'
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: >
            ðŸš¨ Urgent PR: <${{ steps.pr_info.outputs.url }}|${{ steps.pr_info.outputs.title }}>
            needs review ASAP! ${{ steps.compute_targets.outputs.hasTargets == 'true' && steps.compute_targets.outputs.slackMentions || '' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # Step 5: Send DMs to reviewers
      - name: DM reviewers
        if: |
          steps.check_urgent.outputs.isUrgent == 'true' &&
          steps.compute_targets.outputs.hasTargets == 'true'
        uses: actions/github-script@v7
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          script: |
            const token = process.env.SLACK_BOT_TOKEN;
            const slackIds = JSON.parse(`${{ steps.compute_targets.outputs.slackUserIds }}`);
            const prUrl = `${{ steps.pr_info.outputs.url }}`;
            const prTitle = `${{ steps.pr_info.outputs.title }}`;
            const text = `ðŸš¨ Urgent PR: <${prUrl}|${prTitle}> needs your review ASAP.`;

            for (const userId of slackIds) {
              // Open DM
              let res = await fetch('https://slack.com/api/conversations.open', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Authorization': `Bearer ${token}`
                },
                body: new URLSearchParams({ users: userId })
              });
              const opened = await res.json();
              if (!opened.ok) {
                core.warning(`Open DM failed for ${userId}: ${opened.error}`);
                continue;
              }

              // Send message
              res = await fetch('https://slack.com/api/chat.postMessage', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json; charset=utf-8',
                  'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ channel: opened.channel.id, text })
              });
              const sent = await res.json();
              if (!sent.ok) {
                core.warning(`DM failed for ${userId}: ${sent.error}`);
              } else {
                core.info(`DM sent to ${userId}`);
              }
            }
