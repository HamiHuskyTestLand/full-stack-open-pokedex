name: Urgent PR Slack Notification

on:
  pull_request:
    types: [labeled, review_requested]

jobs:
  notify_urgent:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get PR basic information
      - name: Get PR details
        id: pr_info
        run: |
          echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "created_at=${{ github.event.pull_request.created_at }}" >> $GITHUB_OUTPUT
          echo "has_urgent_label=${{ contains(github.event.pull_request.labels.*.name, 'urgent') }}" >> $GITHUB_OUTPUT
          # Comma-separated list of requested reviewers
          REVIEWERS=$(printf "%s," ${{ github.event.pull_request.requested_reviewers.*.login }})
          REVIEWERS="${REVIEWERS%,}" # Remove trailing comma
          echo "reviewers=${REVIEWERS}" >> $GITHUB_OUTPUT

      # Step 2: Check if PR is urgent (simplified logic)
      - name: Check if urgent PR
        id: check_urgent
        run: |
          ACTION="${{ github.event.action }}"

          if [[ "$ACTION" == "labeled" ]]; then
            # Only trigger if the new label is 'urgent'
            NEW_LABEL="${{ github.event.label.name }}"
            if [[ "${NEW_LABEL,,}" == "urgent" ]]; then
              echo "isUrgent=true" >> $GITHUB_OUTPUT
            else
              echo "isUrgent=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "$ACTION" == "review_requested" ]]; then
            # Only trigger if PR already has 'urgent' label
            HAS_URGENT="${{ steps.pr_info.outputs.has_urgent_label }}"
            echo "isUrgent=$HAS_URGENT" >> $GITHUB_OUTPUT
          else
            echo "isUrgent=false" >> $GITHUB_OUTPUT
          fi

          echo "Action: $ACTION, Is Urgent: $(grep isUrgent $GITHUB_OUTPUT | cut -d= -f2)"

      # Step 3: Compute notification targets (using data from Step 1)
      - name: Compute notification targets
        id: compute_targets
        if: steps.check_urgent.outputs.isUrgent == 'true'
        uses: actions/github-script@v7
        env:
          SLACK_REVIEWER_MAP: ${{ vars.SLACK_REVIEWER_MAP }} # {"ghLogin":"UXXXX..."}
        with:
          script: |
            const reviewerMap = JSON.parse(process.env.SLACK_REVIEWER_MAP || "{}");
            const action = `${{ github.event.action }}`;
            const prCreatedAt = `${{ steps.pr_info.outputs.created_at }}`;

            let targetUsers = [];
            let shouldPostToChannel = false;

            if (action === 'review_requested') {
              // New review request: notify the newly requested reviewer
              const newReviewer = `${{ github.event.requested_reviewer.login }}`;
              if (new
