on:
  pull_request:
    types: [opened, labeled, review_requested]  

jobs:
  notify_urgent:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR number
        id: pr
        run: echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      # Check 'urgent' & basic PR info
      - name: Check label "urgent"
        id: label_check
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number(`${{ steps.pr.outputs.number }}`);
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner, repo: context.repo.repo, pull_number: prNumber
            });
            const labels = (pr.labels || []).map(l => (l.name || '').trim());
            const hasUrgent = labels.some(n => n.toLowerCase() === 'urgent');
            core.setOutput('hasUrgent', String(hasUrgent));
            core.setOutput('prTitle', pr.title);
            core.setOutput('prUrl', pr.html_url);

      # Decide who to notify and whether to post to channel
      - name: Compute targets & channel-post rule
        id: targets
        uses: actions/github-script@v7
        env:
          SLACK_REVIEWER_MAP: ${{ vars.SLACK_REVIEWER_MAP }}
        with:
          script: |
            const map = JSON.parse(process.env.SLACK_REVIEWER_MAP || "{}");
            const action = context.payload.action;
            const prNumber = Number(`${{ steps.pr.outputs.number }}`);

            // helpers
            const listUsers = async () => {
              const { data } = await github.rest.pulls.listRequestedReviewers({
                owner: context.repo.owner, repo: context.repo.repo, pull_number: prNumber
              });
              return (data.users || []).map(u => u.login);
            };

            // figure reviewers for this event
            let ghUsers = [];
            if (action === 'review_requested' && context.payload.requested_reviewer) {
              ghUsers = [context.payload.requested_reviewer.login]; // only the newly added
            } else {
              ghUsers = await listUsers(); // may be empty on opened
            }

            const uniq = [...new Set(ghUsers)];
            const slackIds = uniq.map(u => map[u] || map[u?.toLowerCase?.()]).filter(Boolean);
            const mentions = slackIds.map(id => `<@${id}>`).join(' ');

            // should we post to the team channel for this event?
            // - opened: only if there are NO reviewers yet
            // - labeled: only if this label action is 'urgent'
            // - review_requested: always (to announce and @mention the new reviewer)
            let shouldChannelPost = false;
            if (action === 'opened') {
              shouldChannelPost = uniq.length === 0;
            } else if (action === 'labeled') {
              shouldChannelPost = (context.payload.label?.name || '').toLowerCase() === 'urgent';
            } else if (action === 'review_requested') {
              shouldChannelPost = true;
            }

            core.setOutput('mentions', mentions);
            core.setOutput('slackIds', JSON.stringify(slackIds));
            core.setOutput('hasReviewers', String(slackIds.length > 0));
            core.setOutput('shouldChannelPost', String(shouldChannelPost));

      # Post to team channel only when our rule says so AND PR is urgent
      - name: Post to team channel (deduped)
        if: ${{ steps.label_check.outputs.hasUrgent == 'true' && steps.targets.outputs.shouldChannelPost == 'true' }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: >
            ðŸš¨ Urgent PR: <${{ steps.label_check.outputs.prUrl }}|${{ steps.label_check.outputs.prTitle }}>
            needs review ASAP! ${{ steps.targets.outputs.hasReviewers == 'true' && steps.targets.outputs.mentions || '' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # DM only the reviewers applicable to this event (new reviewer on review_requested, or existing reviewers on opened with CODEOWNERS)
      - name: DM reviewers
        if: ${{ steps.label_check.outputs.hasUrgent == 'true' && steps.targets.outputs.hasReviewers == 'true' }}
        uses: actions/github-script@v7
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          script: |
            const token = process.env.SLACK_BOT_TOKEN;
            const slackIds = JSON.parse(`${{ steps.targets.outputs.slackIds }}`);
            const prUrl = `${{ steps.label_check.outputs.prUrl }}`;
            const prTitle = `${{ steps.label_check.outputs.prTitle }}`;
            const text = `ðŸš¨ Urgent PR: <${prUrl}|${prTitle}> needs your review ASAP.`;

            for (const userId of slackIds) {
              // open DM
              let res = await fetch('https://slack.com/api/conversations.open', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded','Authorization': `Bearer ${token}`},
                body: new URLSearchParams({ users: userId })
              });
              const opened = await res.json();
              if (!opened.ok) { core.warning(`Open DM failed for ${userId}: ${JSON.stringify(opened)}`); continue; }
              // send
              res = await fetch('https://slack.com/api/chat.postMessage', {
                method: 'POST',
                headers: {'Content-Type': 'application/json; charset=utf-8','Authorization': `Bearer ${token}`},
                body: JSON.stringify({ channel: opened.channel.id, text })
              });
              const sent = await res.json();
              if (!sent.ok) core.warning(`DM failed for ${userId}: ${JSON.stringify(sent)}`);
            }
