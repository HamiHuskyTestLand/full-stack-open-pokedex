name: Notify Stale Reviewer

on:
  pull_request:
    types: [synchronize]

permissions:
  pull-requests: write

jobs:
  notify-stale-reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Find current approvers
        id: find-approvers
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const prNumber = pr.number;
            const requestedReviewers = pr.requested_reviewers.map(r => r.login).filter(r => !r.endsWith('[bot]'));

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Get latest review per user
            const latestReviewsByUser = reviews
              .filter(r => r.user && r.user.login)
              .sort((a, b) => new Date(a.submitted_at) - new Date(b.submitted_at))
              .reduce((acc, review) => {
                acc[review.user.login] = review;
                return acc;
              }, {});

            // DEBUG: 印出 reviewer 狀態
            console.log('requestedReviewers:', requestedReviewers);
            console.log('latestReviewsByUser:', latestReviewsByUser);

            let allRequestedApproved = true;
            let lastApprovedReviewer = null;
            let lastApprovedTime = 0;

            for (const reviewer of requestedReviewers) {
              const review = latestReviewsByUser[reviewer];
              if (!review || review.state !== 'APPROVED') {
                allRequestedApproved = false;
                break;
              }
              const submitted = new Date(review.submitted_at).getTime();
              if (submitted > lastApprovedTime) {
                lastApprovedTime = submitted;
                lastApprovedReviewer = reviewer;
              }
            }

            return (allRequestedApproved && lastApprovedReviewer) ? {
              hasApprovals: true,
              prNumber,
              mostRecentApprover: lastApprovedReviewer,
              debug: {
                requestedReviewers,
                latestReviewsByUser
              }
            } : { hasApprovals: false, debug: {
                requestedReviewers,
                latestReviewsByUser
              } };
