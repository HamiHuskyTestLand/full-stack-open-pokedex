name: Notify Stale Reviewer

on:
  pull_request:
    types: [synchronize]

permissions:
  pull-requests: write

jobs:
  notify-stale-reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Find current approvers
        id: find-approvers
        uses: actions/github-script@v7
        with:
          script: |
            const pusher = context.payload.sender.login;
            const prNumber = context.payload.pull_request.number;
            const prAuthor = context.payload.pull_request.user.login;
            const requestedReviewers = context.payload.pull_request.requested_reviewers.map(r => r.login);

            console.log('Fetching timeline events...');
            const timeline = await github.paginate(github.rest.issues.listEventsForTimeline, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                per_page: 100
            });
            console.log(`Fetched ${timeline.length} timeline events`);

            const allEverRequestedReviewers = new Set(requestedReviewers);
            timeline.forEach(event => {
                if (event.event === 'review_requested' && event.requested_reviewer) {
                    allEverRequestedReviewers.add(event.requested_reviewer.login);
                }
            });
            console.log(`All requested reviewers: ${[...allEverRequestedReviewers].join(', ')}`);

            const isPusherReviewer = allEverRequestedReviewers.has(pusher) && pusher !== prAuthor;
            if (isPusherReviewer) {
                console.log(`${pusher} is a reviewer. Skipping (handled by "Notify on Reviewer Commit").`);
                return { hasApprovals: false };
            }

            console.log('Fetching all reviews...');
            const reviews = await github.paginate(github.rest.pulls.listReviews, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                per_page: 100
            });
            console.log(`Fetched ${reviews.length} reviews`);

            const latestReviewsByUser = reviews.reduce((acc, review) => {
                const login = review.user.login;
                if (!acc[login] || new Date(review.submitted_at) > new Date(acc[login].submitted_at)) {
                    acc[login] = review;
                }
                return acc;
            }, {});

            const reviewerOnlyReviews = Object.values(latestReviewsByUser)
                .filter(review =>
                    !review.user.login.endsWith('[bot]') &&
                    allEverRequestedReviewers.has(review.user.login)
                );

            console.log(`Reviewer reviews count: ${reviewerOnlyReviews.length}`);

            const currentApprovers = reviewerOnlyReviews
                .filter(review => review.state === 'APPROVED')
                .sort((a, b) => new Date(b.submitted_at) - new Date(a.submitted_at));

            const hasChangesRequested = reviewerOnlyReviews.some(review =>
                review.state === 'CHANGES_REQUESTED'
            );

            const hasOnlyCommented = reviewerOnlyReviews.some(review =>
                review.state === 'COMMENTED'
            );

            const hasPendingHumanReviewers = requestedReviewers.some(reviewer =>
                !reviewer.endsWith('[bot]')
            );

            console.log(`Approvers: ${currentApprovers.length}`);
            console.log(`Has changes requested: ${hasChangesRequested}`);
            console.log(`Has only commented: ${hasOnlyCommented}`);
            console.log(`Has pending reviewers: ${hasPendingHumanReviewers}`);

            const allReviewersApproved = currentApprovers.length > 0
                && !hasPendingHumanReviewers
                && !hasChangesRequested
                && !hasOnlyCommented;

            if (!allReviewersApproved) {
                console.log('Not all reviewers approved. Workflow complete.');
                return { hasApprovals: false };
            }

            const mostRecentApprover = currentApprovers[0].user.login;
            console.log(`âœ… All reviewers approved! Notifying: ${mostRecentApprover}`);

            return {
                hasApprovals: true,
                prNumber,
                mostRecentApprover
            };

      - name: Comment on PR to notify stale reviewers
        if: fromJson(steps.find-approvers.outputs.result).hasApprovals
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ fromJson(steps.find-approvers.outputs.result).prNumber }}
          body: |
            @${{ fromJson(steps.find-approvers.outputs.result).mostRecentApprover }} A new commit has been pushed to this PR. Please review again if your review appears stale and merging is blocked.
